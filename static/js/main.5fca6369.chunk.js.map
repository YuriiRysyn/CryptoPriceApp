{"version":3,"sources":["api/apiKey.js","components/CryptoCurrency/CurrencySelector/CurrencyPicker/CurrencyPicker.jsx","components/CryptoCurrency/CurrencySelector/DefaultCurrency/DefaultCurrency.jsx","components/CryptoCurrency/CurrencySelector/CurrencySelector.jsx","api/getCurrencyData.js","components/CryptoCurrency/MarketData/MarketData.jsx","api/getHistoryData.js","components/CryptoCurrency/ChartingData/HistoryGraph/HistoryGraph.jsx","components/CryptoCurrency/ChartingData/ChartingData.jsx","api/getListOfAssets.js","components/CryptoCurrency/CryptoCurrency.jsx","components/App.jsx","index.js"],"names":["APIKey","CurrencyPicker","currentCryptoCurrency","setCurrentCryptoCurrency","assetsNames","listOfAssets","map","asset","asset_id","className","onChange","event","target","value","key","DefaultCurrency","CurrencySelector","setCryptoData","isPending","isPendingForHistoryData","socket","useRef","useState","isSubscribed","setIsSubscribed","length","onClick","close","unSubscribeForCurrencyData","current","WebSocket","params","type","apikey","heartbeat","subscribe_data_type","subscribe_filter_asset_id","onopen","e","console","log","send","JSON","stringify","onmessage","data","parse","onclose","wasClean","code","reason","onerror","error","message","subscribeForCurrencyData","disabled","MarketData","cryptoData","name","asset_id_base","quote","asset_id_quote","symbol","price","rate","time","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getHistoryData","currencyName","a","url","fetch","headers","res","json","HistoryGraph","config","series","oneDayData","rate_close","options","chart","height","zoom","enabled","dataLabels","stroke","curve","title","text","align","xaxis","categories","time_close","labels","formatter","day","yaxis","width","ChartingData","React","memo","setIsPendingForHistoryData","setData","useEffect","getListOfAssets","list","filteredList","filter","type_is_crypto","slice","CryptoCurrency","setListOfAssets","setIsPending","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fca6369.chunk.js","sourcesContent":["// export const APIKey = 'D870122E-9742-4554-B61D-E7F1F6C7AEA8';\n// another key in case the query limit is used\n// export const APIKey = 'EEFC7A6D-D612-4983-BAAF-A30016847ECC';\n\nexport const APIKey = 'F99D0173-FF9E-45B7-BF10-E4D3CDEC546F';\n\n\n\n","import React from 'react';\n\nimport './CurrencyPicker.scss';\n\nexport const CurrencyPicker = ({\n  currentCryptoCurrency,\n  setCurrentCryptoCurrency,\n  listOfAssets,\n}) => {\n  const assetsNames = listOfAssets.map(asset => asset.asset_id);\n\n  const handleChange = event => {\n    setCurrentCryptoCurrency(event.target.value);\n  };\n  // also can be added one more select to select other currency to be counted, if we want not only compare to USD\n\n  return (\n    <section className=\"CurrencyPicker\">\n      <select onChange={handleChange} value={currentCryptoCurrency}>\n        {assetsNames.map(asset => (\n          <option key={asset}>{asset}</option>\n        ))}\n      </select>\n      <span> / USD</span>\n    </section>\n  );\n};\n","import React from 'react';\n\nexport const DefaultCurrency = ({ currentCryptoCurrency }) => {\n  return (\n    <section className=\"DefaultCurrency\">\n      <span>{currentCryptoCurrency} / USD</span>\n    </section>\n  );\n};\n","import React, { useRef } from 'react';\nimport { useState } from 'react';\nimport {\n  subscribeForCurrencyData,\n  unSubscribeForCurrencyData,\n} from '../../../api/getCurrencyData';\n\nimport './CurrencySelector.scss';\nimport { CurrencyPicker } from './CurrencyPicker/CurrencyPicker';\nimport { DefaultCurrency } from './DefaultCurrency/DefaultCurrency';\n\nexport const CurrencySelector = ({\n  listOfAssets,\n  setCryptoData,\n  currentCryptoCurrency,\n  setCurrentCryptoCurrency,\n  isPending,\n  isPendingForHistoryData,\n}) => {\n  const socket = useRef(null);\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  const onSubscribe = () => {\n    if (!isSubscribed) {\n      const url = 'wss://ws-sandbox.coinapi.io/v1/';\n      socket.current = new WebSocket(url);\n\n      subscribeForCurrencyData(\n        socket.current,\n        setCryptoData,\n        setIsSubscribed,\n        currentCryptoCurrency\n      );\n    } else {\n      unSubscribeForCurrencyData(socket.current, setIsSubscribed);\n    }\n  };\n\n  return (\n    <section className=\"CurrencySelector\">\n      {listOfAssets && listOfAssets.length && !isSubscribed ? (\n        <CurrencyPicker\n          currentCryptoCurrency={currentCryptoCurrency}\n          setCurrentCryptoCurrency={setCurrentCryptoCurrency}\n          listOfAssets={listOfAssets}\n        />\n      ) : (\n        <DefaultCurrency currentCryptoCurrency={currentCryptoCurrency} />\n      )}\n\n      <button\n        className=\"CurrencySelector__subscribe-btn\"\n        onClick={onSubscribe}\n        disabled={isPending || isPendingForHistoryData}\n      >\n        {isSubscribed ? 'Unsubscribe' : 'Subscribe'}\n      </button>\n    </section>\n  );\n};\n","import { APIKey } from './apiKey';\n\nexport const subscribeForCurrencyData = (\n  socket,\n  setCryptoData,\n  setIsSubscribed,\n  currentCryptoCurrency\n) => {\n  const params = {\n    type: 'hello',\n    apikey: APIKey,\n    heartbeat: false,\n    subscribe_data_type: ['exrate'],\n    subscribe_filter_asset_id: [`${currentCryptoCurrency}/USD`],\n  };\n\n  socket.onopen = function (e) {\n    console.log('[open] Connection established');\n    console.log('Sending to server');\n    socket.send(JSON.stringify(params));\n    setIsSubscribed(true);\n  };\n\n  socket.onmessage = function (event) {\n    console.log('Data received from server');\n    const data = JSON.parse(event.data);\n\n    setCryptoData(data);\n  };\n\n  socket.onclose = function (event) {\n    if (event.wasClean) {\n      console.log(\n        `[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`\n      );\n    } else {\n      console.log('[close] Connection died');\n    }\n  };\n\n  socket.onerror = function (error) {\n    console.log(`[error] ${error.message}`);\n  };\n};\n\nexport const unSubscribeForCurrencyData = (socket, setIsSubscribed) => {\n  socket.close();\n  setIsSubscribed(false);\n};\n","import React from 'react';\n\nimport './MarketData.scss';\n\nexport const MarketData = ({ cryptoData }) => {\n  const name = cryptoData ? cryptoData.asset_id_base : '-';\n  const quote = cryptoData ? cryptoData.asset_id_quote : '-';\n  const symbol = `${name}/${quote}`;\n\n  const price = cryptoData ? '$' + cryptoData.rate : '-';\n  const time = cryptoData ? new Date(cryptoData.time) : '-';\n  const data = cryptoData\n    ? +time.getDate() +\n      '/' +\n      (time.getMonth() + 1) +\n      '/' +\n      time.getFullYear() +\n      ' ' +\n      time.getHours() +\n      ':' +\n      time.getMinutes() +\n      ':' +\n      time.getSeconds()\n    : '-';\n\n  return (\n    <section className=\"MarketData\">\n      <h2 className=\"MarketData__title\">Market data:</h2>\n      <div className=\"MarketData__crypto-data\">\n        <p className=\"MarketData__crypto-data-type\">\n          <span className=\"MarketData__crypto-data-type-title\">Symbol:</span>\n          <span className=\"MarketData__crypto-data-type-value\">{symbol}</span>\n        </p>\n        <p className=\"MarketData__crypto-data-type\">\n          <span className=\"MarketData__crypto-data-type-title\">Price:</span>\n          <span className=\"MarketData__crypto-data-type-value\">{price}</span>\n        </p>\n        <p className=\"MarketData__crypto-data-type\">\n          <span className=\"MarketData__crypto-data-type-title\">Time:</span>\n          <span className=\"MarketData__crypto-data-type-value\">{data}</span>\n        </p>\n      </div>\n    </section>\n  );\n};\n","import { APIKey } from './apiKey';\n\nexport const getHistoryData = async currencyName => {\n  const url = `https://rest-sandbox.coinapi.io/v1/exchangerate/${currencyName}/USD/history?period_id=1DAY&time_start=2022-02-01&time_end=2022-02-28`;\n  // Set time range for current month with period per day, can be changed if needed\n\n  try {\n    const res = await fetch(url, {\n      headers: {\n        'X-CoinAPI-Key': APIKey,\n      },\n    });\n    const data = await res.json();\n\n    return data;\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n","import React from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\nimport './HistoryGraph.scss';\n\nexport const HistoryGraph = ({ data }) => {\n  const prices = data && data.map(oneDayData => oneDayData.rate_close);\n  const dates = data &&  data.map(oneDayData => {\n    const date = new Date(oneDayData.time_close).getDate();\n\n    return date;\n  });\n\n  const config = {\n    series: [\n      {\n        name: 'Price',\n        data: prices,\n      },\n    ],\n    options: {\n      chart: {\n        height: 350,\n        type: 'area',\n        zoom: {\n          enabled: true,\n        },\n      },\n      dataLabels: {\n        enabled: true,\n      },\n      stroke: {\n        curve: 'straight',\n      },\n      title: {\n        text: 'Currency history prices per day for current month',\n        align: 'left',\n      },\n      xaxis: {\n        name: 'Day of month',\n        categories: dates,\n        labels: {\n          formatter: day => (day ? day + ' Feb' : ''),\n        },\n      },\n\n      yaxis: {\n        labels: {\n          formatter: value => value + '$',\n        },\n      },\n    },\n  };\n\n  return (\n    <div className=\"HistoryGraph\">\n      <ReactApexChart\n        options={config.options}\n        series={config.series}\n        width={600}\n      />\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getHistoryData } from '../../../api/getHistoryData';\n\nimport './ChartingData.scss';\nimport { HistoryGraph } from './HistoryGraph/HistoryGraph';\n\nexport const ChartingData = React.memo(\n  ({ currentCryptoCurrency, setIsPendingForHistoryData }) => {\n    const [data, setData] = useState();\n\n    useEffect(() => {\n      (async () => {\n        if (currentCryptoCurrency) {\n          setIsPendingForHistoryData(true);\n          const data = await getHistoryData(currentCryptoCurrency);\n          setIsPendingForHistoryData(false);\n\n          setData(data);\n        }\n      })();\n    }, [currentCryptoCurrency]);\n\n    return (\n      <section className=\"ChartingData\">\n        <h2 className=\"ChartingData__title\">Charting data:</h2>\n        {currentCryptoCurrency && data && data.length && (\n          <HistoryGraph data={data} />\n        )}\n      </section>\n    );\n  }\n);\n","import { APIKey } from './apiKey';\n\nexport const getListOfAssets = async () => {\n  const url = 'https://rest.coinapi.io/v1/assets/';\n\n  try {\n    const res = await fetch(url, {\n      headers: {\n        'X-CoinAPI-Key': APIKey,\n      },\n    });\n\n    const list = await res.json();\n    console.log(list);\n\n    const filteredList = list\n      .filter(asset => asset.type_is_crypto === 1)\n      .slice(0, 29);\n    // get only crypto and limit assets list to 30, for example we don't need all assets\n\n    return filteredList;\n  } catch (e) {\n    console.log(e);\n\n    return null;\n  }\n};\n","import React, { useEffect, useState } from 'react';\n\nimport './CryptoCurrency.scss';\nimport { CurrencySelector } from './CurrencySelector/CurrencySelector';\nimport { MarketData } from './MarketData/MarketData';\nimport { ChartingData } from './ChartingData/ChartingData';\n\nimport { getListOfAssets } from '../../api/getListOfAssets';\n\nexport const CryptoCurrency = () => {\n  const [currentCryptoCurrency, setCurrentCryptoCurrency] = useState('BTC');\n  const [listOfAssets, setListOfAssets] = useState();\n\n  const [cryptoData, setCryptoData] = useState();\n\n  const [isPending, setIsPending] = useState(false);\n  const [isPendingForHistoryData, setIsPendingForHistoryData] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      setIsPending(true);\n      const data = await getListOfAssets();\n      setIsPending(false);\n      setListOfAssets(data);\n    })();\n  }, []);\n\n  return (\n    <section className=\"CryptoCurrency\">\n      <CurrencySelector\n        listOfAssets={listOfAssets}\n        setCryptoData={setCryptoData}\n        currentCryptoCurrency={currentCryptoCurrency}\n        setCurrentCryptoCurrency={setCurrentCryptoCurrency}\n        isPending={isPending}\n        isPendingForHistoryData={isPendingForHistoryData}\n      />\n      {isPending ? (\n        <h2>Loading...</h2>\n      ) : (\n        <>\n          <MarketData cryptoData={cryptoData} />\n          <ChartingData\n            currentCryptoCurrency={currentCryptoCurrency}\n            setIsPendingForHistoryData={setIsPendingForHistoryData}\n          />\n        </>\n      )}\n    </section>\n  );\n};\n","import React from 'react';\n\nimport './App.scss';\n\nimport { CryptoCurrency } from './CryptoCurrency/CryptoCurrency';\n\nexport const App = () => {\n\n  return (\n    <section className=\"app\">\n      <CryptoCurrency />\n    </section>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App.jsx';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}